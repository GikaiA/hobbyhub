{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Kai\\\\Desktop\\\\hobbyhub\\\\src\\\\Feed\\\\Feed.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport \"./Feed.css\";\nimport supabase from \"../supabaseClient\";\nimport { Link, useParams } from \"react-router-dom\";\nimport Post from \"../Post/Post\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Feed() {\n  _s();\n  const [posts, setPosts] = useState([]);\n  const {\n    postId\n  } = useParams(); // Get postId from route params\n\n  useEffect(() => {\n    if (postId) {\n      // Fetch a specific post if postId is provided\n      fetchPostById(postId);\n    } else {\n      // Fetch all posts if no postId is provided\n      fetchPosts();\n    }\n  }, [postId]); // Add postId to the dependency array\n\n  const fetchPosts = async () => {\n    try {\n      const {\n        data,\n        error\n      } = await supabase.from(\"posts\").select(\"*\");\n      if (error) {\n        console.error(\"Error fetching posts:\", error.message);\n        return;\n      }\n      setPosts(data);\n    } catch (error) {\n      console.error(\"Error fetching posts:\", error.message);\n    }\n  };\n  const fetchPostById = async id => {\n    try {\n      const {\n        data,\n        error\n      } = await supabase.from(\"posts\").select(\"*\").eq(\"id\", id).single();\n      if (error) {\n        console.error(\"Error fetching post:\", error.message);\n        return;\n      }\n      setPosts([data]); // Set the single post as an array\n    } catch (error) {\n      console.error(\"Error fetching post:\", error.message);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"feed\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Feed\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"search-field-section\",\n      children: /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        className: \"search-field\",\n        placeholder: \"Search...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"createpost-section\",\n      children: /*#__PURE__*/_jsxDEV(Link, {\n        to: \"/create\",\n        children: /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"createpost-button\",\n          children: \"Create A Post\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 62,\n          columnNumber: 28\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 7\n    }, this), posts.map(post => /*#__PURE__*/_jsxDEV(Link, {\n      to: `/post/${post.id}`,\n      className: \"post-link\",\n      children: [/*#__PURE__*/_jsxDEV(Post, {\n        post: post\n      }, post.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 11\n      }, this), \" \"]\n    }, post.id, true, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 9\n    }, this))]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 56,\n    columnNumber: 5\n  }, this);\n}\n_s(Feed, \"NNLIPd/LUvIDP3asNyjKontJUfw=\", false, function () {\n  return [useParams];\n});\n_c = Feed;\nexport default Feed;\nvar _c;\n$RefreshReg$(_c, \"Feed\");","map":{"version":3,"names":["React","useState","useEffect","supabase","Link","useParams","Post","jsxDEV","_jsxDEV","Feed","_s","posts","setPosts","postId","fetchPostById","fetchPosts","data","error","from","select","console","message","id","eq","single","className","children","fileName","_jsxFileName","lineNumber","columnNumber","type","placeholder","to","map","post","_c","$RefreshReg$"],"sources":["C:/Users/Kai/Desktop/hobbyhub/src/Feed/Feed.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport \"./Feed.css\";\r\nimport supabase from \"../supabaseClient\";\r\nimport { Link, useParams } from \"react-router-dom\";\r\nimport Post from \"../Post/Post\";\r\n\r\nfunction Feed() {\r\n  const [posts, setPosts] = useState([]);\r\n  const { postId } = useParams(); // Get postId from route params\r\n\r\n  useEffect(() => {\r\n    if (postId) {\r\n      // Fetch a specific post if postId is provided\r\n      fetchPostById(postId);\r\n    } else {\r\n      // Fetch all posts if no postId is provided\r\n      fetchPosts();\r\n    }\r\n  }, [postId]); // Add postId to the dependency array\r\n\r\n  const fetchPosts = async () => {\r\n    try {\r\n      const { data, error } = await supabase.from(\"posts\").select(\"*\");\r\n\r\n      if (error) {\r\n        console.error(\"Error fetching posts:\", error.message);\r\n        return;\r\n      }\r\n\r\n      setPosts(data);\r\n    } catch (error) {\r\n      console.error(\"Error fetching posts:\", error.message);\r\n    }\r\n  };\r\n\r\n  const fetchPostById = async (id) => {\r\n    try {\r\n      const { data, error } = await supabase\r\n        .from(\"posts\")\r\n        .select(\"*\")\r\n        .eq(\"id\", id)\r\n        .single();\r\n\r\n      if (error) {\r\n        console.error(\"Error fetching post:\", error.message);\r\n        return;\r\n      }\r\n\r\n      setPosts([data]); // Set the single post as an array\r\n    } catch (error) {\r\n      console.error(\"Error fetching post:\", error.message);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"feed\">\r\n      <h2>Feed</h2>\r\n      <div className=\"search-field-section\">\r\n        <input type=\"text\" className=\"search-field\" placeholder=\"Search...\" />\r\n      </div>\r\n      <div className=\"createpost-section\">\r\n        <Link to='/create'><button className=\"createpost-button\">Create A Post</button></Link>\r\n      </div>\r\n      {posts.map((post) => (\r\n        <Link key={post.id} to={`/post/${post.id}`} className=\"post-link\">\r\n          <Post key={post.id} post={post} /> {/* Ensure 'key' prop is unique */}\r\n        </Link>\r\n      ))}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Feed;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}